//
// Generated file, do not edit! Created by nedtool 5.6 from applications/agentquartet/common/AQMsgs.msg.
//

#ifndef __INET_AQMSGS_M_H
#define __INET_AQMSGS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class AQRequestHeader;
class AQResponseHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>applications/agentquartet/common/AQMsgs.msg:21</tt> by nedtool.
 * <pre>
 * enum RequestType
 * {
 *     GET = 1;
 *     POST = 2;
 *     PUT = 3;
 *     DEL = 4;
 * }
 * </pre>
 */
enum RequestType {
    GET = 1,
    POST = 2,
    PUT = 3,
    DEL = 4
};

/**
 * Enum generated from <tt>applications/agentquartet/common/AQMsgs.msg:28</tt> by nedtool.
 * <pre>
 * enum ResponseType
 * {
 *     //Success 2.xx
 *     CREATED = 201;
 *     DELETED = 202;
 *     VALID = 203;
 *     CHANGED = 204;
 *     CONTENT = 205;
 *     ///Client Error 4.xx
 *     BAD_REQUEST = 400;
 *     UNAUTHORIZED = 401;
 *     BAD_OPTION = 402;
 *     FORBIDDEN = 403;
 *     NOT_FOUND = 404;
 *     METHOD_NOT_ALLOWED = 405;
 *     NOT_ACCEPTABLE = 406;
 *     CONFLICT = 409;
 *     PRECONDITION_FAILED = 412;
 *     REQUEST_ENTITY_TOO_LARGE = 413;
 *     UNSUPPORTED_CONTENT_FORMAT = 415;
 *     //Server Error 5.xx
 *     INTERNAL_SERVER_ERROR = 500;
 *     NOT_IMPLEMENTED = 501;
 *     BAD_GATEWAY = 502;
 *     SERVICE_UNAVAILABLE = 503;
 *     GATEWAY_TIMEOUT = 504;
 *     PROXYING_NOT_SUPPORTED = 505;
 * }
 * </pre>
 */
enum ResponseType {
    CREATED = 201,
    DELETED = 202,
    VALID = 203,
    CHANGED = 204,
    CONTENT = 205,
    BAD_REQUEST = 400,
    UNAUTHORIZED = 401,
    BAD_OPTION = 402,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    METHOD_NOT_ALLOWED = 405,
    NOT_ACCEPTABLE = 406,
    CONFLICT = 409,
    PRECONDITION_FAILED = 412,
    REQUEST_ENTITY_TOO_LARGE = 413,
    UNSUPPORTED_CONTENT_FORMAT = 415,
    INTERNAL_SERVER_ERROR = 500,
    NOT_IMPLEMENTED = 501,
    BAD_GATEWAY = 502,
    SERVICE_UNAVAILABLE = 503,
    GATEWAY_TIMEOUT = 504,
    PROXYING_NOT_SUPPORTED = 505
};

/**
 * Class generated from <tt>applications/agentquartet/common/AQMsgs.msg:56</tt> by nedtool.
 * <pre>
 * class AQRequestHeader extends FieldsChunk
 * {
 *     RequestType header;
 *     string uriPath[];
 * }
 * </pre>
 */
class AQRequestHeader : public ::inet::FieldsChunk
{
  protected:
    inet::RequestType header = static_cast<inet::RequestType>(-1);
    omnetpp::opp_string *uriPath = nullptr;
    size_t uriPath_arraysize = 0;

  private:
    void copy(const AQRequestHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AQRequestHeader&);

  public:
    AQRequestHeader();
    AQRequestHeader(const AQRequestHeader& other);
    virtual ~AQRequestHeader();
    AQRequestHeader& operator=(const AQRequestHeader& other);
    virtual AQRequestHeader *dup() const override {return new AQRequestHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::RequestType getHeader() const;
    virtual void setHeader(inet::RequestType header);
    virtual void setUriPathArraySize(size_t size);
    virtual size_t getUriPathArraySize() const;
    virtual const char * getUriPath(size_t k) const;
    virtual void setUriPath(size_t k, const char * uriPath);
    virtual void insertUriPath(const char * uriPath);
    virtual void insertUriPath(size_t k, const char * uriPath);
    virtual void eraseUriPath(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AQRequestHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AQRequestHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/agentquartet/common/AQMsgs.msg:61</tt> by nedtool.
 * <pre>
 * class AQResponseHeader extends FieldsChunk
 * {
 *     ResponseType header;
 *     string uriPath[];
 * }
 * </pre>
 */
class AQResponseHeader : public ::inet::FieldsChunk
{
  protected:
    inet::ResponseType header = static_cast<inet::ResponseType>(-1);
    omnetpp::opp_string *uriPath = nullptr;
    size_t uriPath_arraysize = 0;

  private:
    void copy(const AQResponseHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AQResponseHeader&);

  public:
    AQResponseHeader();
    AQResponseHeader(const AQResponseHeader& other);
    virtual ~AQResponseHeader();
    AQResponseHeader& operator=(const AQResponseHeader& other);
    virtual AQResponseHeader *dup() const override {return new AQResponseHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::ResponseType getHeader() const;
    virtual void setHeader(inet::ResponseType header);
    virtual void setUriPathArraySize(size_t size);
    virtual size_t getUriPathArraySize() const;
    virtual const char * getUriPath(size_t k) const;
    virtual void setUriPath(size_t k, const char * uriPath);
    virtual void insertUriPath(const char * uriPath);
    virtual void insertUriPath(size_t k, const char * uriPath);
    virtual void eraseUriPath(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AQResponseHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AQResponseHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_AQMSGS_M_H

