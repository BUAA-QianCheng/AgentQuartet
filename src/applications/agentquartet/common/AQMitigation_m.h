//
// Generated file, do not edit! Created by nedtool 5.6 from applications/agentquartet/common/AQMitigation.msg.
//

#ifndef __INET_AQMITIGATION_M_H
#define __INET_AQMITIGATION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class MitigationTarget;
class MitigationCreate;
class MitigationStatistics;
class MitigationEfficacy;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "transportlayer/PortRange_m.h" // import transportlayer.PortRange


namespace inet {

/**
 * Enum generated from <tt>applications/agentquartet/common/AQMitigation.msg:23</tt> by nedtool.
 * <pre>
 * //Mitication Scope 
 * enum MitigationStatus
 * {
 *     SETUP = 1;
 *     MITIGATED = 2;
 *     ATTACK_STOPPED = 3;
 *     CAPABILITY_EXCEEDED = 4;
 *     TERMINATING = 5;
 *     TERMINATED = 6;
 *     OVERLAPING = 7;
 *     STANDING_BY = 8;
 * }
 * </pre>
 */
enum MitigationStatus {
    SETUP = 1,
    MITIGATED = 2,
    ATTACK_STOPPED = 3,
    CAPABILITY_EXCEEDED = 4,
    TERMINATING = 5,
    TERMINATED = 6,
    OVERLAPING = 7,
    STANDING_BY = 8
};

/**
 * Class generated from <tt>applications/agentquartet/common/AQMitigation.msg:34</tt> by nedtool.
 * <pre>
 * class MitigationTarget extends FieldsChunk
 * {
 *     string targetPrefix[];// example: 192.168.1.101/32 
 *     PortRange portRange[];
 *     uint8_t targetProtocol[];//uint8
 *     string targetFqdn[];//inet:domain_name
 *     string targetUri[];//inet:uri
 *     string aliasName;//string
 * }
 * </pre>
 */
class MitigationTarget : public ::inet::FieldsChunk
{
  protected:
    omnetpp::opp_string *targetPrefix = nullptr;
    size_t targetPrefix_arraysize = 0;
    PortRange *portRange = nullptr;
    size_t portRange_arraysize = 0;
    uint8_t *targetProtocol = nullptr;
    size_t targetProtocol_arraysize = 0;
    omnetpp::opp_string *targetFqdn = nullptr;
    size_t targetFqdn_arraysize = 0;
    omnetpp::opp_string *targetUri = nullptr;
    size_t targetUri_arraysize = 0;
    omnetpp::opp_string aliasName;

  private:
    void copy(const MitigationTarget& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MitigationTarget&);

  public:
    MitigationTarget();
    MitigationTarget(const MitigationTarget& other);
    virtual ~MitigationTarget();
    MitigationTarget& operator=(const MitigationTarget& other);
    virtual MitigationTarget *dup() const override {return new MitigationTarget(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setTargetPrefixArraySize(size_t size);
    virtual size_t getTargetPrefixArraySize() const;
    virtual const char * getTargetPrefix(size_t k) const;
    virtual void setTargetPrefix(size_t k, const char * targetPrefix);
    virtual void insertTargetPrefix(const char * targetPrefix);
    virtual void insertTargetPrefix(size_t k, const char * targetPrefix);
    virtual void eraseTargetPrefix(size_t k);
    virtual void setPortRangeArraySize(size_t size);
    virtual size_t getPortRangeArraySize() const;
    virtual const PortRange& getPortRange(size_t k) const;
    virtual PortRange& getPortRangeForUpdate(size_t k) { handleChange();return const_cast<PortRange&>(const_cast<MitigationTarget*>(this)->getPortRange(k));}
    virtual void setPortRange(size_t k, const PortRange& portRange);
    virtual void insertPortRange(const PortRange& portRange);
    virtual void insertPortRange(size_t k, const PortRange& portRange);
    virtual void erasePortRange(size_t k);
    virtual void setTargetProtocolArraySize(size_t size);
    virtual size_t getTargetProtocolArraySize() const;
    virtual uint8_t getTargetProtocol(size_t k) const;
    virtual void setTargetProtocol(size_t k, uint8_t targetProtocol);
    virtual void insertTargetProtocol(uint8_t targetProtocol);
    virtual void insertTargetProtocol(size_t k, uint8_t targetProtocol);
    virtual void eraseTargetProtocol(size_t k);
    virtual void setTargetFqdnArraySize(size_t size);
    virtual size_t getTargetFqdnArraySize() const;
    virtual const char * getTargetFqdn(size_t k) const;
    virtual void setTargetFqdn(size_t k, const char * targetFqdn);
    virtual void insertTargetFqdn(const char * targetFqdn);
    virtual void insertTargetFqdn(size_t k, const char * targetFqdn);
    virtual void eraseTargetFqdn(size_t k);
    virtual void setTargetUriArraySize(size_t size);
    virtual size_t getTargetUriArraySize() const;
    virtual const char * getTargetUri(size_t k) const;
    virtual void setTargetUri(size_t k, const char * targetUri);
    virtual void insertTargetUri(const char * targetUri);
    virtual void insertTargetUri(size_t k, const char * targetUri);
    virtual void eraseTargetUri(size_t k);
    virtual const char * getAliasName() const;
    virtual void setAliasName(const char * aliasName);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MitigationTarget& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MitigationTarget& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/agentquartet/common/AQMitigation.msg:43</tt> by nedtool.
 * <pre>
 * class MitigationCreate extends MitigationTarget
 * {
 *     int32_t lifetime;//int32
 *     bool triggerMitigation;//boolean
 * }
 * </pre>
 */
class MitigationCreate : public ::inet::MitigationTarget
{
  protected:
    int32_t lifetime = 0;
    bool triggerMitigation = false;

  private:
    void copy(const MitigationCreate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MitigationCreate&);

  public:
    MitigationCreate();
    MitigationCreate(const MitigationCreate& other);
    virtual ~MitigationCreate();
    MitigationCreate& operator=(const MitigationCreate& other);
    virtual MitigationCreate *dup() const override {return new MitigationCreate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int32_t getLifetime() const;
    virtual void setLifetime(int32_t lifetime);
    virtual bool getTriggerMitigation() const;
    virtual void setTriggerMitigation(bool triggerMitigation);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MitigationCreate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MitigationCreate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/agentquartet/common/AQMitigation.msg:48</tt> by nedtool.
 * <pre>
 * class MitigationStatistics extends MitigationCreate
 * {
 *     uint64_t mitigationStart;//uint64
 *     MitigationStatus status;//iana_signal:status
 *     long bytesDropped;
 *     long bpsDropped;
 *     long pktsDropped;
 *     long ppsDropped;
 * }
 * </pre>
 */
class MitigationStatistics : public ::inet::MitigationCreate
{
  protected:
    uint64_t mitigationStart = 0;
    inet::MitigationStatus status = static_cast<inet::MitigationStatus>(-1);
    long bytesDropped = 0;
    long bpsDropped = 0;
    long pktsDropped = 0;
    long ppsDropped = 0;

  private:
    void copy(const MitigationStatistics& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MitigationStatistics&);

  public:
    MitigationStatistics();
    MitigationStatistics(const MitigationStatistics& other);
    virtual ~MitigationStatistics();
    MitigationStatistics& operator=(const MitigationStatistics& other);
    virtual MitigationStatistics *dup() const override {return new MitigationStatistics(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint64_t getMitigationStart() const;
    virtual void setMitigationStart(uint64_t mitigationStart);
    virtual inet::MitigationStatus getStatus() const;
    virtual void setStatus(inet::MitigationStatus status);
    virtual long getBytesDropped() const;
    virtual void setBytesDropped(long bytesDropped);
    virtual long getBpsDropped() const;
    virtual void setBpsDropped(long bpsDropped);
    virtual long getPktsDropped() const;
    virtual void setPktsDropped(long pktsDropped);
    virtual long getPpsDropped() const;
    virtual void setPpsDropped(long ppsDropped);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MitigationStatistics& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MitigationStatistics& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/agentquartet/common/AQMitigation.msg:57</tt> by nedtool.
 * <pre>
 * class MitigationEfficacy extends FieldsChunk
 * {
 *     bool attackStatus;
 * }
 * </pre>
 */
class MitigationEfficacy : public ::inet::FieldsChunk
{
  protected:
    bool attackStatus = false;

  private:
    void copy(const MitigationEfficacy& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MitigationEfficacy&);

  public:
    MitigationEfficacy();
    MitigationEfficacy(const MitigationEfficacy& other);
    virtual ~MitigationEfficacy();
    MitigationEfficacy& operator=(const MitigationEfficacy& other);
    virtual MitigationEfficacy *dup() const override {return new MitigationEfficacy(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getAttackStatus() const;
    virtual void setAttackStatus(bool attackStatus);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MitigationEfficacy& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MitigationEfficacy& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_AQMITIGATION_M_H

